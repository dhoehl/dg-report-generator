/*
 * Copyright (C) 2020.  Dennis Hoehl
 * This file is part of DG report generator <https://github.com/dhoehl/dg-report-generator>.
 *
 * DG report generator is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * DG report generator is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with DG report generator.  If not, see <http://www.gnu.org/licenses/>.
 */

package dhoehl.degiro;


import dhoehl.gui.Constants;
import dhoehl.model.Asset;
import dhoehl.model.ParsingError;
import dhoehl.utils.MoneyUtils;
import org.joda.money.BigMoney;

public class HtmlReport implements Constants {
    private final StringBuilder header = new StringBuilder(
            "<!doctype html>\n" +
                    "<html lang=\"de\">\n" +
                    "\n" +
                    "<head>\n" +
                    "  <meta charset=\"utf-8\">\n" +
                    "  <meta name=\"description\" content=\"Degiro report (inofficial)\">\n" +
                    "  <title>Degiro report (inofficial)</title>\n" +
                    "  <style>\n" +
                    "    table {\n" +
                    "      width: 100%;\n" +
                    "    }\n" +
                    "\n" +
                    "    table,\n" +
                    "    th,\n" +
                    "    td {\n" +
                    "      border: 1px solid black;\n" +
                    "      border-collapse: collapse;\n" +
                    "    }\n" +
                    "\n" +
                    "    th,\n" +
                    "    td {\n" +
                    "      padding: 15px;\n" +
                    "      text-align: left;\n" +
                    "    }\n" +
                    "\n" +
                    "    tr:nth-child(even) {\n" +
                    "      background-color: #eee;\n" +
                    "    }\n" +
                    "\n" +
                    "    tr:nth-child(odd) {\n" +
                    "      background-color: #fff;\n" +
                    "    }\n" +
                    "\n" +
                    "    th {\n" +
                    "      background-color: rgb(65, 117, 194);\n" +
                    "      color: white;\n" +
                    "    }\n" +
                    "  </style>\n" +
                    "</head>\n" +
                    "\n" +
                    "<body>\n" +
                    "  <h1>Degiro report (inofficial)</h1>\n" +
                    "  <h5>" + DISCLAIMER_HTML + "</h5>\n" +
                    "  <h4><span  style=\"color:#34b1eb\">If this tool was useful for you. Consider buying me a coffee via <a href=\"https://www.paypal.me/dhoehl\">PayPal</a></span></h4>"
    );
    private final String error =
            "<h4 style=\"color:crimson;\">" +
                    "Not all rows could be interpreted correctly. A" +
                    "complete list of all faults can be found at the <a href=#failures>end</a> of this document. It is appreciated if you send your csv (of " +
                    "course you can alter the data and/or only include the ones with the failure) by <a href=\"mailto:dhoehl@arcor.de?subject=DGRG_ERROR\">" +
                    "mail</a>. I will try my best to bugfix things asap." +
                    "<br><br> </h4>";
    private String errorSection =
            "<div id=\"failures\"></div>\n" +
                    "  <h2><a href=#navigation>FAILURES</a><br></h2>\n";

    private final StringBuilder navigation = new StringBuilder(
            "<div id=\"navigation\"></div>\n" +
                    "<h2>Navigation</h2>\n"
    );

    private final String footer =
            "<p>Auto generated by Degiro report generator (Version: " + APP_VERSION + ", <a href=\"" + GIT_URL + "\">" + GIT_URL + "</a>)</p>\n" +
                    "</body>\n" +
                    "\n" +
                    "</html>";

    private final StringBuilder document = new StringBuilder();
    private final StringBuilder errors = new StringBuilder();

    private StringBuilder sectionNavigation;
    private StringBuilder section;

    private String sectionTag;
    private boolean appendError;

    public void appendAsset(Asset asset) {
        appendNavigationSection(sectionNavigation, asset.getName(), asset.getName());
        section.append("<div id=\"" + asset.getName() + "\"></div>\n");
        section.append(asset.toStringHtml(sectionTag));
    }

    public void appendAsset(Asset asset, int year) {
        //Check if there were errors
        if(asset.hasErrors()) {
            appendError = true;
            appendError(asset.getError());
        }

        appendNavigationSection(sectionNavigation, asset.getName(), asset.getName() + year);
        section.append("<div id=\"" + asset.getName() + year + "\"></div>\n");
        section.append(asset.toStringHtml(year, sectionTag));
    }

    private void flush() {
        //Flush old sections to the document if exist
        if (sectionNavigation != null) {
            document.append(sectionNavigation);
            document.append(section);

        }
        sectionNavigation = new StringBuilder();
        section = new StringBuilder();
    }


    public void appendErrorHeader() {
        appendError = true;
    }

    @Override
    public String toString() {
        flush();
        StringBuilder sb = new StringBuilder(header);
        if (appendError) {
            return header.append(error).append(navigation).append(document).append(errorSection).append(errors).append(footer).toString();
        } else {
            return header.append(navigation).append(document).append(footer).toString();
        }
    }

    private void appendNavigationSection(StringBuilder sb, String name, String tag) {
        sb.append(
                "  <a href=\"#" + tag + "\">" + name + "</a><br>\n"
        );
    }

    public void appendSection(String name) {
        flush();
        sectionTag = name;
        appendNavigationSection(navigation, name, name);
        document.append(
                "<div id=\"" + name + "\"></div>\n" +
                        "  <h2><a href=#navigation>" + name + "</a><br></h2>\n"
        );
    }

    public void appendSectionSummary(long countStockSells, long countNonStockSells, long countStockBuys, long countNonStockBuys, BigMoney plStocks, BigMoney plNonStocks, BigMoney feesStocks, BigMoney feesNonStocks, BigMoney exchangefeesStocks, BigMoney exchangefeesNonStocks, BigMoney overall) {
        if (overall.compareTo(BigMoney.zero(overall.getCurrencyUnit())) != 0)
            document.append("<p>Total (Open position inc. all P/L and fees): <b>" + MoneyUtils.toStringHtml(overall) + "</b></p>\n");
        document.append("<p>Trade count (Stocks - Buys): <b>" + countStockBuys + "</b></p>\n" +
                "<p>Trade count (Stocks - Sells): <b>" + countStockSells + "</b></p>\n" +
                "<p>Trade count (Non stocks - Buys): <b>" + countNonStockBuys + "</b></p>\n" +
                "<p>Trade count (Non stocks - Sells): <b>" + countNonStockSells + "</b></p>\n" +
                "<p>Trade count: <b>" + (countStockSells + countNonStockSells + countStockBuys + countNonStockBuys) + "</b></p>\n" +
                "<p>Profit/Loss (Stocks): <b>" + MoneyUtils.toStringHtml(plStocks) + "</b></p>\n" +
                "<p>Profit/Loss (Non stocks): <b>" + MoneyUtils.toStringHtml(plNonStocks) + "</b></p>\n" +
                "<p>Profit/Loss: <b>" + MoneyUtils.toStringHtml(plStocks.plus(plNonStocks)) + "</b></p>\n" +
                "<p>Payed transaction fees (Stocks): <b>" + MoneyUtils.toStringHtml(feesStocks) + "</b></p>\n" +
                "<p>Payed transaction fees (Non stocks): <b>" + MoneyUtils.toStringHtml(feesNonStocks) + "</b></p>\n" +
                "<p>Payed transaction fees: <b>" + MoneyUtils.toStringHtml(feesStocks.plus(feesNonStocks)) + "</b></p>\n" +
                "<p>Payed exchange fees (Stocks): <b>" + MoneyUtils.toStringHtml(exchangefeesStocks) + "</b></p>\n" +
                "<p>Payed exchange fees (Non stocks): <b>" + MoneyUtils.toStringHtml(exchangefeesNonStocks) + "</b></p>\n" +
                "<p>Payed exchange fees: <b>" + MoneyUtils.toStringHtml(exchangefeesStocks.plus(exchangefeesNonStocks)) + "</b></p>\n" +
                "<p>Payed fees: <b>" + MoneyUtils.toStringHtml(feesStocks.plus(feesNonStocks).plus(exchangefeesStocks).plus(exchangefeesNonStocks)) + "</b></p>\n" +
                "<p>Profit/Loss (Fees included): <b>" + MoneyUtils.toStringHtml(plStocks.plus(plNonStocks).plus(feesStocks).plus(feesNonStocks).plus(exchangefeesStocks).plus(exchangefeesNonStocks)) + "</b></p>\n");
    }

    public void appendError(String errorMessage) {
        errors.append("<h4 style=\"color:crimson;\">" + errorMessage + "<br></h4>");
    }
}
